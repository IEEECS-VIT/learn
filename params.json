{"name":"Learner's Hut","tagline":"A repository with suggested guidelines to aspiring developers.","body":"## Where most developers fail\r\n### (and what you should do to prevent that)\r\n##### - Vinay on behalf of the Board\r\n<br/>\r\nWinter semester's started. You suddenly look at people around you, think about yourself, and say, \"Time to do something with my life!\", and with all enthusiasm, decided to become a web or app developer.\r\n\r\nAnd so you start. Lets download the platform 's IDE and jump in right away! All you have to do is watch a few tutorials about the new language and then the platform. *We can learn the rest along the way.* Awesome. You're ready for some field action in just weeks. And so in no time you begin your first project, VIT Forums (say). But surprise, cause in another few weeks now, you're getting **confused**. There are some words prefixed to the function signature (know what it means?), but you don't know why. Too many bugs, and now you're struggling with inheritance behaving weird. Your UI stopped displaying right on a different resolution. Soon, your screen is filled with an ocean of badly written code (**trust me**), and you're lost. Well. App/Web dev is getting tough, and its so *difficult to understand when so much is going on at once*.\r\n\r\nBut wait! Google to the rescue. With a lot of struggle, stumble, googling and copying code, if you still haven't given up, you just finished your project! Great right? Not bad at all. And so it doesn't stop here. You go ahead with your next project, the same way. You're now almost blindly following what the internet tells, without even knowing what's what. But after some months, you're annoyed with yourself for not knowing it well enough. **Of struggling and of spending many weeks on every project**, while you should have been really good at it by now. Maybe this is a bit tough. Or maybe this is not your cup of tea, lets move to another domain! But guess what happens when you start learning the next thing? *(spoiler: Back to square one)*\r\n\r\nSo what went wrong? In short, you were probably too jumpy and **impatient**. You tried to write a paragraph before learning how to write a sentence well. Yeah but, who's gonna spend so long learning the basics? Terrible idea. And that's why finally, you end up being **another mediocre developer**. *Alas, if you only had been patient enough.*\r\n\r\nSo what should you have done?\r\n> Give me 6 hours to cut a tree and I'll spend the first 4 hours sharpening the axe.\r\n\r\nThis guy definitely wasn't bullshitting (Its Abraham Lincoln btw). And not to get philosophical now, but it gets to the point. **Learn the concepts and the language well first. Read a good book.** Watch tutorials. Practice.\r\n\r\nAnd if this showed any sense to you, and you trust our experience, read the FAQ below and then the [guide](https://github.com/IEEECS-VIT/learn/wiki/Guide).\r\n\r\nIf you read this through, thank you.\r\n\r\n***\r\n\r\n### FAQ\r\n\r\n#### Q. I don't plan to stick to the same domain, is it worth spending the time?\r\nA. Absolutely yes. Any language you learn really well and thorough, helps you learn any other pretty quickly.\r\n\r\n\r\n#### Q. How long should I spend on the language basics?\r\nA. Well it depends entirely on your learning rate and past experience. Ideally ranging from a few months up to a semester even. Actually, the [guide](https://github.com/IEEECS-VIT/learn/wiki/Guide) has what's needed in more detail.\r\n\r\n\r\n#### Q. Since I'll only be learning the language, is it going to be all boring?\r\nA. Not at all. Practice - make small programs as you learn. When I learnt C#, I made Tic-Tac-Toe, 2048 and a matrix library, everything on Console. It was fun.\r\n\r\n\r\n#### Q. So if I spend so long on the language, what about the project?\r\nA. That can wait. Your technical soundness is more important.","google":"UA-72472266-1","note":"Don't delete this file! It's used internally to help with page regeneration."}